# "Python Programming: An Introduction to Computer Science"
# by John Zelle, 3rd Ed.
# Chapter 3: Computing with Numbers
# End-of-Chapter Exercises

### REVIEW QUESTIONS

## True/False

#  1. T
#  2. F
#  3. F
#  4. T
#  5. F
#  6. F
#  7. T
#  8. T
#  9. T
# 10. F
#
#  Multiple Choice
#
#  1. C
#  2. D
#  3. D
#  4. B
#  5. B
#  6. C
#  7. C
#  8. D
#  9. A
# 10. D

## Discussion

#  1. Show the result of evaluating each expression. Be sure that the value is in the proper form to indicate its type (int
#     or float). If the expression is illegal, explain way.
#                                      Value
#     a) 4.0 / 10.0 + 3.5 * 2          7.4
#     b) 10 % 4 + 6 / 2                5.0
#     c) abs(4 - 20) // 3) ** 3        18.96296296296297
#     d) sqrt(4.5 - 5.0) + 7 * 3       ?
#     e) 3 + 10 // 3 + 10 % 3          7.333333333333334
#     f) 3 ** 3                        27

#  2. Translate each of the following mathematical expressions into an equivalent Python expression. You may assume that the math
#     library has been imported (via import math).
#     a) (3 + 4)(5)                    -> (3+4)*5
#     b) (n(n-1))/2                    -> (n*(n-1))/2
#     c) 4pir^2                        -> 4*pi*r**2
#     d) sqrt(r(cosa)^2 + r(sinb)^2)   -> math.sqrt((r*cos(a)**2)+(r*sin(b)**2))
#     e) (y2 - y1) / (x2 - x1)         -> (y2 - y1) / (x2 - x1) 

#  3. Show the sequence of numbers that would be generated by each of the following range expressions.
#     a) range(5)                      -> [0, 1, 2, 3, 4]
#     b) range(3,10)                    -> [3, 4, 5, 6, 7, 8, 9]
#     c) range(4,13,3)                 -> [4, 7, 10]
#     d) range(15,5,-2)                -> [15, 13, 11, 9, 7]
#     e) range(5,3)                    -> []
 
#  4. Show the output that would be generated by each of the following program fragments.
#     a) for i in range(1,11):
#            print(i*i)
#
#         OUTPUT:
#
#             1
#             4
#             9
#             16
#             25
#             36
#             49
#             64
#             81
#             100
#
#     b) for i in [1,3,5,7,9]:
#            print(i, ":", i**3)
#        print(i)   
#
#         OUTPUT:
#
#             1:1
#             3:27
#             5:125
#             7:343
#             9:729
#             9
#
#     c) x = 2
#        y = 10
#        for j in range(0, y, x):
#            print(j, end="")
#            print(x + y)
#       print("done")

#
#         OUTPUT:
#
#             0:12
#             2:12
#             4:12
#             6:12
#             8:12
#             done
#
#     d) ans = 0
#        for i in range(1,11):
#            ans = ans + i*i
#            print(i)
#        print(ans)

#
#         OUTPUT:
#
#             1
#             2
#             3
#             4
#             5
#             6
#             7
#             8
#             9
#             10
#             385
#
#
#  5. What do you think will happen if you use a negative number as the second parameter in the round function? For example, what
#     should be the result of round(314.159265, -1)? Explain the rational for your answer. After you've written your answer, consult
#     the Python documentation or try out some examples to see what Python actually does in this case.

#  6. What do you think will happen when the operands to the integer division or remainder operations are negative? Consider each of the
#     following cases and try to predict the results. Then try them out in Python.
#     Hint: Recall the magic formula a = (a//b)(b) + (a%b).
#     a) -10 // 3
#     b) -10 % 3
#     c) 10 // -3
#     d) 10 % -3
#     e) -10 // -3


### PROGRAMMING EXERCISES

#  1. Write a program to calculate the volume and surface area of a sphere from its radius, given as input. Here are some formulas that might
#     be useful:
#     V = (4/3)3pir^3
#     A = 4pir^2
     SOLUTION : 
              import math
               def main:
                   print "SURFACE OF A SPHERE : "
                   r = input("Enter the radius : ")
                   A = 4*math.pi*r**2
                   print "The surface of the sphere is: ",A
                   print
                   print "VOLUME OF A SPHERE : "
                   V = (4.0/3.0)*math.pi*r**3
                   print "The volume of the sphere is: ",V
                main()
#

#  2. Write a program that calculates the cost per square inch of a circular pizze, given its diameter and price. The formula for area is
#     A = pir^2.

#  3. Write a program that computes the molecular weight of a carbohydrate (in grams per mole) based on the number of hydrogen, carbon, and
#     oxygen atoms in the molecule. The program should prompt the user to enter the number of hydrogen atomes, the number of carbon atoms,
#     and the number of oxygen atoms. The program then prints the total combined molecular weight of all the atoms based on these individual
#     atom weights:
#                  Atom      Weight
#                            (grams/mole)
#                  ______________________
#                  H         1.00894
#                  C         12.0107
#                  O         15.9994
#     For example, the molecular weight of water (H20) is 2(1.00794) + 15.9994 = 18.01528.
     SOLUTION : 
                def main():
                  print("This program calculates the molecular weight of a hydrocarbon.")
                  h = 1.0079
                  c = 12.011
                  o = 15.9994
                  hn = eval(input("Enter the number of hydrogen atoms "))
                  cn = eval(input("Enter the number of  carbon atoms "))
                  on = eval(input("Enter the number of  oxygen atoms "))
                  sum = (h*hn) + (c*cn) + (o*on)
                  print("The molecular weight of the hydrocarbon is ", sum)
              main()
              
#  4. Write a program that determines the distance to a lightning strike based on the time elapsed between the flash and the sound of thunder.
#     The speed of sound is approximately 1100 ft/sec and 1 mile is 5280 ft.

#  5. The Konidtorei coffee shop sells coffee at $10.50 a pound plus the cost of shipping. Each order ships for $.086 per pound + $1.50 fixed cost
#     for overhead. Write a program that calculates the cost of an order.
     SOLUTION :
              import math
               def main():
                print ("The price of a coffee order")
                print
                ans = input("Enter the number of pounds you want to order: ")
                price = ((10.50+0.86)*ans)+1.50
                print "The total cost of the coffee is: ",price
               main()

#  6. Two points in a plane are specified using the coordinates (x1,y1) and (x2,y2). Write a program that calculates the slope of a line through
#     two (non-vertical) points entered by the user.
#                                                   slope = (y2 - y1) / (x2 - x1)
      SOLUTION : 
              
               def main():
                print ("A program that calculates the slope of a line")
                print
                x1,y1 = input("Enter the coordinates of first point separated by comma: ")
                x2,y2 = input("Enter the coordinates of second point separated by comma: ")
                slope = (y2 - y1) / (x2 - x1)
                print "The slope of a line is: ",slope
               main()
            
            
#  7. Write a program that accepts two points (see previous problem) and determins the distance between them.
#     distances = sqrt((x2-x1)^2 + (y2-y1)^2)


      SOLUTION:
                import math
              def main():
               print ("A program that calculates the distance between two points")
               print
               x1,y1 = input("Enter the coordinates of first point separated by comma: ")
               x2,y2 = input("Enter the coordinates of second point separated by comma: ")
               distance = math.sqrt((x2-x1)**2 + (y2-y1)**2)
               print "The distance between the two points is: ",distance
              main()
            
#  8. The Gregorian epact is the number of days between January 1st and the previous new moon. This value is used to figure out the date of Easter.
#     It is calculated by these formulas (using int arithmetic):
#                                                               C = year//100
#                                                               epact = (8 + (C//4) - C + ((8C + 13)//25) + 11(year%19))%30
       SOLUTION: 
  
                import math
              def main():
               print("This program calculates the value of epact.")
               print()
               year = input("Input a 4 digit year. ")
               c = year//100
               epact = (8 + (c//4) - c + ((8*c +13)//25) + 11*(year%19))%30

               print("The Gregorian epact is ", epact)


              main()
#  9. Write a program to calcualte the area of a triangle given the length of its three sides--a, b, and c--using these formulas:
#                                         s = (a + b + c) / 2
#                                         A = sqrt(s(s - a)(s - b)(s - c))
#     
      SOLUTION:
  
               import math
             def main():
              print("calculating the area of a triangle")
              a,b,c = input("enter a,b and c separated by commas")
              s=(a+b+c)/2
              Area=math.sqrt(s*(s-a)*(s-b)*(s-c))
              print
              print "The area of the triangle is: ",Area


             main()
# 10. Write a program to determine the length of a ladder required to reach a given height when leaned against a house. The height and angle of the
#     ladder are given as inputs. To compute length use:
#                                                       length = height / sin angle
#     Note: The angle must be in radians. Prompt for an angle in degrees and use this formula to convert:
#                                                       radians = (pi / 180) degrees


        SOLUTION:
            import math
            def main():
              height = input("Please enter the height of the ladder ")
              deg = input("Please enter the angle of the ladder in degrees ")
              rad = (math.pi/180) * deg
              leng = height/(math.sin(rad))
              print("The length of the ladder must be ", leng)
          main()
# 11. Write a program to find the first n natural numbers, where the value of n is provided by the user.
         SOLUTION: 
              def main():
             n = input("Enter a value: ")
             for i in range(n+1):
              print i
            main()
# 12. Write a program to find the sum of the cubes of the first n natural numbers where the value of n is provided by the user.
        SOLUTION: 
                 import math
            def main():
             n = input("Enter a value: ")
             r=0
             for i in range(n+1):
              r+=i**3
             print r
            main()
           
# 13. Write a program to sum a series of numbers entered by the user. The program should first prompt the user for how many numbers are to be summed.
#     The program should then prompt the user for each of the numbers in turn and print out a total sum after all the numbers have been entered.
#     Hint: Use an input statement in the body of the loop.

# sum.py
# a program that sums up a series of numbers entered by the user

import math
def main():
 n = input("How many numbers you want to sum ")
 sum=0
 for i in range(n):
  number= input("Enter number ")
  sum+=number
 print sum
  
  
main()

# 14. Write a program that finds the average of a series of numbers entered by the user. As in the previous problem, the program will first ask the
#     user how many numbers there are. Note: The average should always be a float, even if the user inputs are all ints.

# avg.py
# a progrma that finds the average of a series of numbers entered by the user



# 15. Write a program tha approximates the value of pi by summing the terms of this series:
#     4/1 - 4/3 + 4/5 = 4/7 + 4/9 - 4/11 + ...
#     The program should prompt the user for n, the number of terms to sum, and then output the sum of the first n terms of this series. Have your
#     program subtrac the approximation from the value of math.pi to see how accurate it is.

# 16. A Fibnoacci sequence is a sequence of numbers where each successive number is the sum of the previous two. The classic Fibonacii sequence
#     begins: 1, 1, 2, 3, 5, 8, 13 ... . Write a program that computes the nth Fibonacci number where n is a value input by the user. For example,
#     if n = 6, then the result is 8.



# 17. You have seen that the math library contains a function that computes the square root of numbers. In this exercise, you are to write your own
#     algorithm for computing square roots. One way to solve this problem is to use a guess-and-check approach. You first guess what the square root
#     might be, and then you see how close your guess is. You can use this information to make another guess and continue guessing until you have
#     found the square root (or a close approximation to it). One particularly good way of making guesses is to use Newton's method.
#     Suppose x is the number we want the root of, and guess is the current guessed answer.
#     The guess can be improved by using computing the next guess as:
#                                                                    (guess + (x / guess)) / 2.
#     Write a program that implements Newton's method. The program should prompt the user for the value to find the square root of (x) and the
#     number of times to improve the guess. Starting with a guess value of x/2, your program should loop the specified number of times applying Newton's
#     method and report the final value of guess. You should also subtract your estimate from the value of math.sqrt(x) to show how close it is.


